# 1. Напишите функцию, которая принимает одно число и проверяет, 
# является ли оно простым
# *Напоминание: Простое число - это число, которое имеет 2 делителя: 
# 1  и n(само число)*

n = int(input("Введите число: "))

def test_prime(n):
    if (n==1):
        return False
    elif (n==2):
        return True;
    else:
        for x in range(2,n):
            if(n % x==0):
                return False
        return True             
print(test_prime(n))


# рекурсией определеить палиндром или нет

def pal(s):
    if len(s) <= 1:
        return "Да"
    elif s[0] == s[-1]:
        return pal(s[1:-1])
    return "Нет"


print(pal('3232'))



# Два различных натуральных числа n и m называются дружественными, 
# если сумма делителей числа n (включая 1, но исключая само n) равна числу m и наоборот. 
# Например, 220 и 284 – дружественные числа. По данному числу k выведите все пары дружественных чисел, 
# каждое из которых не превосходит k. Программа получает на вход одно натуральное число k, 
# не превосходящее 105. Программа должна вывести все пары дружественных чисел, 
# каждое из которых не превосходит k. Пары необходимо выводить по одной в строке, 
# разделяя пробелами. Каждая пара должна быть выведена только один раз 
# (перестановка чисел новую пару не дает).
# Ввод: Вывод:
# 300 220 284


def sum_of_proper_divisors(n):
    s = 0
    for k in range(1, n // 2 + 1):
        if n % k == 0:
            s += k
    return s

for i in range(1, 10000):
    j = sum_of_proper_divisors(i)
    if i < j <= n and i == sum_of_proper_divisors(j):
        print(i, j)